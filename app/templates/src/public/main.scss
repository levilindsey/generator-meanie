/**
 * Converts a pixel value to em, rem, or % based on a base size
 * NOTE: For percent units, pass 100% as the $unit
 * @param  {Number} $pixels             Number of pixels to convert; must be a pixel value
 * @param  {Number} $unit: 1rem         Unit of the return value; can be em, rem, or %
 * @param  {Number} $base: $base-size   Base size; must be a pixel value
 * @return {Number}                     ($pixels / $base) * $unit
 */
@function px2unit($pixels, $unit: 1rem, $base: 16px) {
  @if unit($pixels) != px { @error 'px2unit error: $pixels must be a pixel value; was #{$pixels}'; }
  @if unitless($unit)     { @error 'px2unit error: $unit may not be unitless; was #{$unit}'; }
  @if unit($base) != px   { @error 'px2unit error: $base must be a pixel value; was #{$base}'; }
  @return ($pixels / $base) * $unit;
}

// --- Shared values --- //

$colors: (
  black: #000000,
  white: #FFFFFF,

  gray-1: #444444,
  gray-2: #888888,

  blue-1: #2299EE,
  blue-2: #77CCFF,

  yellow-1: #D6AF00,
  yellow-2: #FFE675
);

$font-sizes: (
  xs: px2unit(10px),
  s: px2unit(12px),
  m: px2unit(16px),
  l: px2unit(22px),
  xl: px2unit(32px),
);

//@font-face {
//  font-family: font-name;
//  src: url('../fonts/**');// TODO: add custom font
//}

@function color($color-name) {
  @return map-get($colors, $color-name);
}

@function font-size($size-name) {
  @return map-get($font-sizes, $size-name);
}

// --- General styles --- //

ul, ol, dl, dd, dt, li, div, body, p, form, hr, h1, h2, h3, h4, h5, img, button {
  margin: 0;
  padding: 0;
}

ul {
  padding-left: 0;
  list-style-type: none;
  width: 100%;
}

html {
  font-size: font-size(m);
  line-height: font-size(m);
}

body {
  font-family: sans-serif;
  color: color(black);
  background-color: color(white);
}

// --- Include all partials --- //

@import 'components/nav-bar/nav-bar';
@import 'components/svg-icon/svg-icon';
@import 'components/toast/toast';

@import 'routes/home/home';
@import 'routes/login/login';
